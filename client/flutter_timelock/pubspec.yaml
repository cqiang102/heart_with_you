name: flutter_timelock
description: lacia im

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
version: 1.0.0+1

environment:
  sdk: ">=2.15.0-96.0.dev <3.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2
  font_awesome_flutter: ^9.1.0 # 图标

  mqtt_client: ^9.6.7 # 消息
  provider: ^6.0.1 # 状态管理
  convex_bottom_bar: ^3.0.0 # 底部导航
  intro_views_flutter: ^3.2.0 # 引导页
  scribble: ^0.3.1 # 画图
  #screenshot: ^1.2.3 # 截图
  flutter_slidable: ^1.2.0
  bubble: ^1.2.1 # 消息气泡
  photo_view: ^0.13.0 # 图片放大查看
  showcaseview: ^1.1.1 # 操作引导
  flutter_spinkit: ^5.1.0
  barcode_widget: ^2.0.2 # 二维码
  mobile_scanner: ^1.0.0
  permission_handler: ^8.0.0  # 权限申请
  amap_flutter_location: ^2.0.0 # 定位地图
  amap_flutter_map: ^2.0.2
  simple_animations: ^4.0.1 # 简单动画
  page_transition: ^2.0.4 # 页面切换动画
  shared_preferences: ^2.0.9 # 数据持久化
  sqflite: ^2.0.2 # 数据库

  retry: ^3.1.0 # 重试
  dio: ^4.0.3 # http
  flex_color_picker: ^2.5.0 # 颜色选择

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^1.0.0
  flutter_launcher_icons: ^0.9.2
  flutter_native_splash: ^1.2.4
# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg
  assets:
    - assets/images/
  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware.

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages


flutter_icons:
  image_path: "assets/images/app_logo.png"
  image_path_android: "assets/images/app_logo.png"
  image_path_ios: "assets/images/app_logo.png"
  android: true # can specify file name here e.g. "ic_launcher"
  ios: true # can specify file name here e.g. "My-Launcher-Icon"
#  adaptive_icon_background: "assets/images/background_app_logo.png" # only available for Android 8.0 devices and above
#  adaptive_icon_foreground: "assets/images/background_app_logo.png" # only available for Android 8.0 devices and above

flutter_intl:
  enabled: true
  main_locale: zh

flutter_native_splash:

  # 这个包生成原生代码来自定义 Flutter 的默认白色原生启动画面，背景颜色和启动图像。
  # 自定义下面的参数，在终端运行下面​​的命令:
  # flutter pub run flutter_native_splash:create
  # 要恢复 Flutter 的默认白色闪屏，请在终端中运行以下命令:
  # flutter pub run flutter_native_splash:remove

  # color 或 background_image 是唯一必需的参数。使用颜色将启动画面的背景设置为纯色。
  # 使用 background_image 将启动画面的背景设置为 png 图像。这对于渐变很有用。图像将被拉伸到应用程序的大小。只能使用一个参数，color 和 background_image 不能同时设置。
  #color: "#42a5f5"
  background_image: "assets/images/lp2.png"

  # 下面列出了可选参数。要启用参数，请通过删除前导字符取消注释该行。

  # image 参数允许您指定启动画面中使用的图像。它必须是一个 png 文件，并且大小应为 4 倍像素密度。
  image: assets/images/lp2.png

  # color_dark、background_image_dark 和 image_dark 是设置设备处于暗模式时的背景和图像的参数。
  # 如果未指定，应用程序将使用上述参数。如果指定了 image_dark 参数，则必须指定 color_dark 或 background_image_dark。
  # color_dark 和 background_image_dark 不能同时设置。
  #color_dark: "#042a49"
  #background_image_dark: "assets/dark-background.png"
  #image_dark: assets/splash-invert.png

  # android、ios 和 web 参数可用于禁用在给定平台上生成启动画面。
  #android: false
  #ios: false
  #web: false

  # 可以使用 android_gravity、ios_content_mode 和 web_image_mode 参数设置初始图像的位置。全部默认居中。
  #
  # android_gravity can be one of the following Android Gravity (see
  # https://developer.android.com/reference/android/view/Gravity): bottom, center,
  # center_horizontal, center_vertical, clip_horizontal, clip_vertical, end, fill, fill_horizontal,
  # fill_vertical, left, right, start, or top.
  #android_gravity: center
  #
  # ios_content_mode can be one of the following iOS UIView.ContentMode (see
  # https://developer.apple.com/documentation/uikit/uiview/contentmode): scaleToFill,
  # scaleAspectFit, scaleAspectFill, center, top, bottom, left, right, topLeft, topRight,
  # bottomLeft, or bottomRight.
  #ios_content_mode: center
  #
  # web_image_mode 可以是以下模式之一：center、contain、stretch 和 cover。
  #web_image_mode: center

  # 要隐藏通知栏，请使用 fullscreen 参数。对网络没有影响，因为网络没有通知栏。默认为假。
  # NOTE: 与 Android 不同，iOS 不会在应用加载时自动显示通知栏。
  #      要显示通知栏，请将以下代码添加到您的 Flutter 应用程序中:
  #       WidgetsFlutterBinding.ensureInitialized();
  #       SystemChrome.setEnabledSystemUIOverlays([SystemUiOverlay.bottom, SystemUiOverlay.top]);
  #fullscreen: true

  # 如果您更改了 info.plist 文件的名称，则可以使用 info_plist_files 参数指定文件名。
  # 只删除下面三行中的字符，不要删除任何空格:
  #info_plist_files:
  #  - 'ios/Runner/Info-Debug.plist'
  #  - 'ios/Runner/Info-Release.plist'

  # To enable support for Android 12, set the following parameter to true.  Defaults to false.
  #android12: true
